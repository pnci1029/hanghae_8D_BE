buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	//querydsl 추가
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	// mysql
	runtimeOnly 'mysql:mysql-connector-java'

	//	소셜로그인
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	//	카카오
	implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: '5.6.3'

	// OAuth2 Google
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'com.google.code.gson:gson:2.9.0'
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'

	// json 파싱
	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

	implementation group: 'org.hibernate', name: 'hibernate-spatial', version: '5.5.7.Final'

	// 스프링 시큐리티
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//	JWT
	compileOnly 'com.auth0:java-jwt:3.13.0'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'org.json:json:20200518'
	implementation group: 'com.auth0', name: 'java-jwt', version: '3.10.3'
	implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	implementation 'commons-codec:commons-codec:1.13'

	//메일 발송
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	//Redis TODO: redis(health check) warn나면 gradle 주석처리해주세요
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//querydsl 추가
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

	//view

	implementation 'com.google.code.gson:gson:2.9.0'

	//  스웨거 의존성
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'


	//s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.0.1.RELEASE'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-aws', version: '2.2.6.RELEASE', ext: 'pom'
	//jasypt
//	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
	implementation group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '3.0.4'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-actuator:2.7.2'
	implementation 'io.micrometer:micrometer-core'

	// Marvin
	implementation 'com.github.downgoon:marvin:1.5.5'
	implementation 'com.github.downgoon:MarvinPlugins:1.5.5'
	compileOnly(group: 'org.springframework', name: 'spring-test')

	// Scalr
	implementation group: 'org.imgscalr', name: 'imgscalr-lib', version: '4.2'

//	// ImageMetadataReader
//	compileOnly group: 'com.drewnoakes', name: 'metadata-extractor', version: '2.9.1'

//	// ImageMetadataReader
//	compileOnly group: 'com.drewnoakes', name: 'metadata-extractor', version: '2.18.0'

}

tasks.named('test') {
	useJUnitPlatform()
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}